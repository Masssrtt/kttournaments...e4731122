import random
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters
from collections import defaultdict

# API Token
TOKEN = '7605213276:AAG7xpVqnG4mxcdgvlqh91tbu_Foaw2D3Ik'
ADMIN_IDS = {5176006969, 1483826275}

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–∞ —Å–ø–∏—Å–∫—É –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
user_balances = defaultdict(int)
all_users = set()
pending_questions = {}
match_predictions = {}

# –§—É–Ω–∫—Ü—ñ—è —Å—Ç–∞—Ä—Ç—É
async def start(update: Update, context):
    user_id = update.message.from_user.id
    if user_id not in all_users:
        all_users.add(user_id)  # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ —Å–ø–∏—Å–∫—É
        print(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –¥–æ–¥–∞–Ω–æ –¥–æ —Å–ø–∏—Å–∫—É.")
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –û—á—ñ–∫—É–π –ø–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∏—Ç–∞–Ω–Ω—è
async def create_question(update: Update, context):
    if update.message.from_user.id in ADMIN_IDS:
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –∑–∞–ø–∏—Ç–∞–Ω–Ω—è:")
        context.user_data['creating_question'] = {'step': 'question'}
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è
async def match_predict_ad(update: Update, context):
    if update.message.from_user.id in ADMIN_IDS:
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è:")
        context.user_data['creating_prediction'] = {'step': 'question'}
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")

# –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É –¥–ª—è –ø–∏—Ç–∞–Ω–Ω—è
async def handle_message(update: Update, context):
    user_data = context.user_data

    if 'creating_question' in user_data:
        step = user_data['creating_question']

        if step['step'] == 'question':
            step['question'] = update.message.text
            step['step'] = 'wrong_answers'
            await update.message.reply_text("–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å 3 –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ —á–µ—Ä–µ–∑ –∫–æ–º—É:")

        elif step['step'] == 'wrong_answers':
            step['wrong_answers'] = update.message.text.split(',')
            step['step'] = 'correct_answer'
            await update.message.reply_text("–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç:")

        elif step['step'] == 'correct_answer':
            step['correct_answer'] = update.message.text
            await send_question_to_all(update, context, step)
            del user_data['creating_question']
            await update.message.reply_text("–ó–∞–ø–∏—Ç–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º!")

    elif 'creating_prediction' in user_data:
        step = user_data['creating_prediction']

        if step['step'] == 'question':
            step['question'] = update.message.text
            step['step'] = 'options'
            await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –¥–≤–∞ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —á–µ—Ä–µ–∑ –∫–æ–º—É:")

        elif step['step'] == 'options':
            options = update.message.text.split(',')
            if len(options) != 2:
                await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ä—ñ–≤–Ω–æ –¥–≤–∞ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.")
                return

            step['options'] = options
            await send_prediction_to_all(update, context, step)
            del user_data['creating_prediction']
            await update.message.reply_text("–û–ø–∏—Ç—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º!")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –ø–∏—Ç–∞–Ω–Ω—è –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º
async def send_question_to_all(update: Update, context, question_data):
    question = question_data['question']
    wrong_answers = question_data['wrong_answers']
    correct_answer = question_data['correct_answer']

    options = wrong_answers + [correct_answer]
    random.shuffle(options)

    keyboard = [[InlineKeyboardButton(option, callback_data=option)] for option in options]

    message = f"‚ùì *{question}*\n\n–í–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç:"
    markup = InlineKeyboardMarkup(keyboard)

    if not all_users:
        await update.message.reply_text("‚ùå –ù–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏.")
        return

    for user_id in all_users:
        try:
            sent_message = await context.bot.send_message(chat_id=user_id, text=message, reply_markup=markup, parse_mode="Markdown")
            pending_questions[sent_message.message_id] = {
                "user_id": user_id,
                "correct": correct_answer
            }

            # –ß–∞—Å–æ–≤–∏–π –ª—ñ–º—ñ—Ç –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å (30 —Å–µ–∫—É–Ω–¥)
            asyncio.create_task(remove_expired_question(sent_message.message_id, context))
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {e}")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º
async def send_prediction_to_all(update: Update, context, prediction_data):
    question = prediction_data['question']
    options = prediction_data['options']

    keyboard = [[InlineKeyboardButton(option, callback_data=f"predict:{option}")] for option in options]

    message = f"üìä *{question}*\n\n–û–±–µ—Ä—ñ—Ç—å —Å–≤—ñ–π –≤–∞—Ä—ñ–∞–Ω—Ç:"
    markup = InlineKeyboardMarkup(keyboard)

    if not all_users:
        await update.message.reply_text("‚ùå –ù–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏.")
        return

    for user_id in all_users:
        try:
            await context.bot.send_message(chat_id=user_id, text=message, reply_markup=markup, parse_mode="Markdown")
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {e}")

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
    admin_keyboard = [[InlineKeyboardButton(option, callback_data=f"admin_predict:{option}")] for option in options]
    admin_message = f"üìä *–û–ø–∏—Ç—É–≤–∞–Ω–Ω—è:* {question}\n\n–û–±–µ—Ä—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è:"
    admin_markup = InlineKeyboardMarkup(admin_keyboard)

    for admin_id in ADMIN_IDS:
        try:
            await context.bot.send_message(chat_id=admin_id, text=admin_message, reply_markup=admin_markup, parse_mode="Markdown")
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

# –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
async def answer_callback(update: Update, context):
    query = update.callback_query
    user_id = query.from_user.id
    data = query.data

    if data.startswith("predict:"):
        selected_option = data.split(":", 1)[1]
        match_predictions.setdefault(user_id, []).append(selected_option)
        await query.answer("–í–∞—à –≤–∏–±—ñ—Ä –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")

    elif data.startswith("admin_predict:"):
        correct_option = data.split(":", 1)[1]
        await finalize_prediction(context, correct_option)
        await query.message.reply_text(f"–û–ø–∏—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç: {correct_option}")

# –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–∞–ª—ñ–≤
async def finalize_prediction(context, correct_option):
    for user_id, predictions in match_predictions.items():
        if correct_option in predictions:
            user_balances[user_id] += 50
            await context.bot.send_message(chat_id=user_id, text=f"‚úÖ –í–∏ –≤–≥–∞–¥–∞–ª–∏! +50 –±–∞–ª—ñ–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: {user_balances[user_id]}")

    match_predictions.clear()

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –±–∞–ª–∞–Ω—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async def balance(update: Update, context):
    user_id = update.message.from_user.id
    await update.message.reply_text(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user_balances[user_id]} –±–∞–ª—ñ–≤")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –≤—Å—ñ—Ö –±–∞–ª–∞–Ω—Å—ñ–≤
async def admin_balance(update: Update, context):
    if update.message.from_user.id in ADMIN_IDS:
        if not user_balances:
            await update.message.reply_text("–ù–∞—Ä–∞–∑—ñ –∂–æ–¥–µ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –º–∞—î –±–∞–ª–∞–Ω—Å—É.")
            return
        balance_info = "\n".join([f"ID: {user} - {balance} –±–∞–ª—ñ–≤" for user, balance in user_balances.items()])
        await update.message.reply_text(f"–ë–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:\n{balance_info}")
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è
async def remove_expired_question(message_id, context):
    await asyncio.sleep(30)
    if message_id in pending_questions:
        user_id = pending_questions[message_id]['user_id']
        await context.bot.send_message(chat_id=user_id, text="‚è≥ –ß–∞—Å –≤–∏–π—à–æ–≤! –í–∏ –Ω–µ –≤—Å—Ç–∏–≥–ª–∏ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏.")
        del pending_questions[message_id]

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞
app = Application.builder().token(TOKEN).build()

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("create_question", create_question))
app.add_handler(CommandHandler("balance", balance))
app.add_handler(CommandHandler("admin_balance", admin_balance))
app.add_handler(CommandHandler("match_predict_ad", match_predict_ad))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
app.add_handler(CallbackQueryHandler(answer_callback))

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
app.run_polling()
